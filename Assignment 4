CNS 3060: Operating Systems
Programming Project 4: more command with signal handling
Due Date:

Tarball must be submitted to Canvas no later than 11:59pm on Tuesday, March 5th. Late assignments can be submitted until Sunday, March 10th.
Objectives

The objectives of this exercise are to give you experience programming the terminal driver and writing a program that handles signals.
Background

The more command in Unix copies the contents of a file to stdout. The command allows the user to move through the file one screen at a time or one line at a time. Read the man pages on the more command and try it out. Be sure you understand exactly how the more command works. Your program will work the same way.
Program Specification

Your more command should work as follows:

    With no arguments: Your more command will copy stdin to stdout. This allows the command to be used with pipes and redirection. The prompt that it prints in this case will be the word "bytes" followed by the number of bytes that have been displayed:  bytes 625 
    With a filename as an argument: Your more command will copy the contents of the named file to stdout. The prompt for the first screen will show the name of the file and the percentage that has been displayed:  myFile.txt 14% 
    After the first screen the prompt should show only the percentage that has been displayed.  28% 
    Your program does not have to work with more than one argument.

Your program will display the first 23 lines of the file. It will then display a prompt in reverse video and wait for user input. The user has three choices at this point:

    If the user types a 'q', then your program exits.
    If the user types a space, then your program displays the next 23 lines of the file.
    If the user presses the ENTER key, then just the next line of the file is displayed.

Note that invalid keystrokes are ignored and keystrokes are not echoed back to the screen.

Your program should use tcgetattrs to save the terminal attributes when it first starts. Before terminating it should use tcsetattrs to restore the original terminal attributes.

Suppose that the user happens to type Ctrl-C while the more program is running. Since the more command uses terminal control, leaving the program without cleaning up could cause difficulties for subsequent programs.

To prevent those kinds of problems, add the code necessary to handle the signal generated by Ctrl-C. Your signal handler should use tcsetattr to reset the terminal mode to the settings that were saved when the program started (which will normally be the default of canonical mode with echo turned on). It should then display a message indicating that the terminal settings have been restored and the program is terminating. It should then terminate.
Reading from the terminal

When more is run with no arguments, it reads lines from the standard input stream and displays them on the screen. However, it also needs to get input from the user, which would normally do by reading standard input. Since it doesn't work to use the standard input stream for both user input and piped input from another command, you will need to read user input from the terminal device rather than from standard input.

You can open the terminal device using either open, which returns a file descriptor, or fopen, which returns a file pointer. File descriptors are declared as integers:
int fd;
whereas file pointers are declared like this:
FILE *fp;

For the more program you need to change the terminal settings, which requires a file descriptor, and you need to read from the terminal using getc, which requires a file pointer. Since you need both a file pointer and a file descriptor, you can use code like this:

int fd_tty;
FILE *fp_tty;
fd_tty = open("/dev/tty", O_RDONLY);
fp_tty = fdopen(fd_tty, "r");

The fdopen function takes a file descriptor and a mode ("r" for read in this case) and returns a file pointer. Using code like this gives you both a file descriptor and a file pointer so that you can change the terminal settings and read from the terminal device.
Notes

 

To erase a character from the screen, display a backspace character (\b), a blank, and another backspace character.

To display a percent (%) sign using printf, use two % symbols in a row.

For reverse video, print \033[7m to start reverse video, and then \033[m to end reverse video. See the code on page 22 of the Molay book for an example.

You can use the reset command to restore your terminal settings if your program doesn't.

 
File(s) to Submit:

The following files should be compressed into a tarball and uploaded to Canvas before the due date.

    Your source code, named more1.c
    An executable file named more1
    A working make file, named Makefile

Grading:

A grade sheet for this project can be found here.
